/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "./configuration"
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios"
import globalAxios from "axios"
// Some imports not used depending on template conditions
// @ts-ignore
import {
    DUMMY_BASE_URL,
    assertParamExists,
    setApiKeyToObject,
    setBasicAuthToObject,
    setBearerAuthToObject,
    setOAuthToObject,
    setSearchParams,
    serializeDataIfNeeded,
    toPathString,
    createRequestFunction,
} from "./common"
import type { RequestArgs } from "./base"
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from "./base"

/**
 *
 * @export
 * @interface CompanyItem
 */
export interface CompanyItem {
    /**
     *
     * @type {string}
     * @memberof CompanyItem
     */
    id: string
    /**
     *
     * @type {string}
     * @memberof CompanyItem
     */
    name: string
    /**
     *
     * @type {string}
     * @memberof CompanyItem
     */
    logoUrl: string
    /**
     *
     * @type {string}
     * @memberof CompanyItem
     */
    websiteUrl: string
    /**
     *
     * @type {string}
     * @memberof CompanyItem
     */
    shortDescription: string
    /**
     *
     * @type {string}
     * @memberof CompanyItem
     */
    longDescription?: string
    /**
     *
     * @type {number}
     * @memberof CompanyItem
     */
    displayPriority?: number
    /**
     *
     * @type {boolean}
     * @memberof CompanyItem
     */
    published?: boolean
}
/**
 *
 * @export
 * @interface CompanyItemCreate
 */
export interface CompanyItemCreate {
    /**
     *
     * @type {string}
     * @memberof CompanyItemCreate
     */
    name: string
    /**
     *
     * @type {string}
     * @memberof CompanyItemCreate
     */
    logoUrl: string
    /**
     *
     * @type {string}
     * @memberof CompanyItemCreate
     */
    websiteUrl: string
    /**
     *
     * @type {string}
     * @memberof CompanyItemCreate
     */
    shortDescription: string
    /**
     *
     * @type {string}
     * @memberof CompanyItemCreate
     */
    longDescription?: string
    /**
     *
     * @type {number}
     * @memberof CompanyItemCreate
     */
    displayPriority?: number
}
/**
 *
 * @export
 * @interface FieldOfStudyItem
 */
export interface FieldOfStudyItem {
    /**
     *
     * @type {string}
     * @memberof FieldOfStudyItem
     */
    id: string
    /**
     *
     * @type {string}
     * @memberof FieldOfStudyItem
     */
    name: string
}
/**
 *
 * @export
 * @interface FieldOfStudyItemCreate
 */
export interface FieldOfStudyItemCreate {
    /**
     *
     * @type {string}
     * @memberof FieldOfStudyItemCreate
     */
    name: string
}
/**
 *
 * @export
 * @interface LanguageItem
 */
export interface LanguageItem {
    /**
     *
     * @type {string}
     * @memberof LanguageItem
     */
    id: string
    /**
     *
     * @type {string}
     * @memberof LanguageItem
     */
    name: string
}
/**
 *
 * @export
 * @interface LanguageItemCreate
 */
export interface LanguageItemCreate {
    /**
     *
     * @type {string}
     * @memberof LanguageItemCreate
     */
    name: string
}
/**
 *
 * @export
 * @interface LanguageSkillItem
 */
export interface LanguageSkillItem {
    /**
     *
     * @type {string}
     * @memberof LanguageSkillItem
     */
    id: string
    /**
     *
     * @type {LanguageItem}
     * @memberof LanguageSkillItem
     */
    language: LanguageItem
    /**
     *
     * @type {string}
     * @memberof LanguageSkillItem
     */
    skillLevel: LanguageSkillItemSkillLevelEnum
}

export const LanguageSkillItemSkillLevelEnum = {
    Native: "NATIVE",
    Fluent: "FLUENT",
    Intermediate: "INTERMEDIATE",
    Beginner: "BEGINNER",
} as const

export type LanguageSkillItemSkillLevelEnum = (typeof LanguageSkillItemSkillLevelEnum)[keyof typeof LanguageSkillItemSkillLevelEnum]

/**
 *
 * @export
 * @interface LanguageSkillItemCreate
 */
export interface LanguageSkillItemCreate {
    /**
     *
     * @type {string}
     * @memberof LanguageSkillItemCreate
     */
    languageId: string
    /**
     *
     * @type {string}
     * @memberof LanguageSkillItemCreate
     */
    skillLevel: LanguageSkillItemCreateSkillLevelEnum
}

export const LanguageSkillItemCreateSkillLevelEnum = {
    Native: "NATIVE",
    Fluent: "FLUENT",
    Intermediate: "INTERMEDIATE",
    Beginner: "BEGINNER",
} as const

export type LanguageSkillItemCreateSkillLevelEnum = (typeof LanguageSkillItemCreateSkillLevelEnum)[keyof typeof LanguageSkillItemCreateSkillLevelEnum]

/**
 *
 * @export
 * @interface MessageResponse
 */
export interface MessageResponse {
    /**
     *
     * @type {string}
     * @memberof MessageResponse
     */
    message?: string
}
/**
 *
 * @export
 * @interface PartnerItem
 */
export interface PartnerItem {
    /**
     *
     * @type {string}
     * @memberof PartnerItem
     */
    id: string
    /**
     *
     * @type {string}
     * @memberof PartnerItem
     */
    name: string
    /**
     *
     * @type {string}
     * @memberof PartnerItem
     */
    logoUrl: string
    /**
     *
     * @type {string}
     * @memberof PartnerItem
     */
    websiteUrl: string
    /**
     *
     * @type {string}
     * @memberof PartnerItem
     */
    partnerType: PartnerItemPartnerTypeEnum
    /**
     *
     * @type {string}
     * @memberof PartnerItem
     */
    shortDescription: string
    /**
     *
     * @type {string}
     * @memberof PartnerItem
     */
    longDescription?: string
    /**
     *
     * @type {number}
     * @memberof PartnerItem
     */
    displayPriority?: number
    /**
     *
     * @type {boolean}
     * @memberof PartnerItem
     */
    published?: boolean
}

export const PartnerItemPartnerTypeEnum = {
    HonorablePatronage: "HONORABLE_PATRONAGE",
    MediaPatronage: "MEDIA_PATRONAGE",
    Sponsor: "SPONSOR",
    Other: "OTHER",
} as const

export type PartnerItemPartnerTypeEnum = (typeof PartnerItemPartnerTypeEnum)[keyof typeof PartnerItemPartnerTypeEnum]

/**
 *
 * @export
 * @interface PartnerItemCreate
 */
export interface PartnerItemCreate {
    /**
     *
     * @type {string}
     * @memberof PartnerItemCreate
     */
    name: string
    /**
     *
     * @type {string}
     * @memberof PartnerItemCreate
     */
    logoUrl: string
    /**
     *
     * @type {string}
     * @memberof PartnerItemCreate
     */
    websiteUrl: string
    /**
     *
     * @type {string}
     * @memberof PartnerItemCreate
     */
    partnerType: PartnerItemCreatePartnerTypeEnum
    /**
     *
     * @type {string}
     * @memberof PartnerItemCreate
     */
    shortDescription: string
    /**
     *
     * @type {string}
     * @memberof PartnerItemCreate
     */
    longDescription?: string
    /**
     *
     * @type {number}
     * @memberof PartnerItemCreate
     */
    displayPriority?: number
}

export const PartnerItemCreatePartnerTypeEnum = {
    HonorablePatronage: "HONORABLE_PATRONAGE",
    MediaPatronage: "MEDIA_PATRONAGE",
    Sponsor: "SPONSOR",
    Other: "OTHER",
} as const

export type PartnerItemCreatePartnerTypeEnum = (typeof PartnerItemCreatePartnerTypeEnum)[keyof typeof PartnerItemCreatePartnerTypeEnum]

/**
 *
 * @export
 * @interface UniversityItem
 */
export interface UniversityItem {
    /**
     *
     * @type {string}
     * @memberof UniversityItem
     */
    id: string
    /**
     *
     * @type {string}
     * @memberof UniversityItem
     */
    name: string
}
/**
 *
 * @export
 * @interface UniversityItemCreate
 */
export interface UniversityItemCreate {
    /**
     *
     * @type {string}
     * @memberof UniversityItemCreate
     */
    name: string
}
/**
 *
 * @export
 * @interface UserItem
 */
export interface UserItem {
    /**
     *
     * @type {string}
     * @memberof UserItem
     */
    id: string
    /**
     *
     * @type {string}
     * @memberof UserItem
     */
    firstName: string
    /**
     *
     * @type {string}
     * @memberof UserItem
     */
    lastName: string
    /**
     *
     * @type {string}
     * @memberof UserItem
     */
    email: string
    /**
     *
     * @type {string}
     * @memberof UserItem
     */
    phoneNumber: string
    /**
     *
     * @type {string}
     * @memberof UserItem
     */
    sex: string
    /**
     *
     * @type {UniversityItem}
     * @memberof UserItem
     */
    university: UniversityItem
    /**
     *
     * @type {FieldOfStudyItem}
     * @memberof UserItem
     */
    fieldOfStudy: FieldOfStudyItem
    /**
     *
     * @type {number}
     * @memberof UserItem
     */
    yearOfStudy: number
    /**
     *
     * @type {Array<LanguageSkillItem>}
     * @memberof UserItem
     */
    languageSkills: Array<LanguageSkillItem>
    /**
     *
     * @type {Array<WorkshopMemberItem>}
     * @memberof UserItem
     */
    workshopMembers: Array<WorkshopMemberItem>
    /**
     *
     * @type {string}
     * @memberof UserItem
     */
    role: UserItemRoleEnum
}

export const UserItemRoleEnum = {
    Student: "STUDENT",
    IaesteMember: "IAESTE_MEMBER",
    LocalCoordinator: "LOCAL_COORDINATOR",
    GeneralCoordinator: "GENERAL_COORDINATOR",
    Admin: "ADMIN",
} as const

export type UserItemRoleEnum = (typeof UserItemRoleEnum)[keyof typeof UserItemRoleEnum]

/**
 *
 * @export
 * @interface UserItemCreate
 */
export interface UserItemCreate {
    /**
     *
     * @type {string}
     * @memberof UserItemCreate
     */
    firstName: string
    /**
     *
     * @type {string}
     * @memberof UserItemCreate
     */
    lastName: string
    /**
     *
     * @type {string}
     * @memberof UserItemCreate
     */
    email: string
    /**
     *
     * @type {string}
     * @memberof UserItemCreate
     */
    phoneNumber: string
    /**
     *
     * @type {string}
     * @memberof UserItemCreate
     */
    sex: string
    /**
     *
     * @type {string}
     * @memberof UserItemCreate
     */
    universityId: string
    /**
     *
     * @type {string}
     * @memberof UserItemCreate
     */
    fieldOfStudyId: string
    /**
     *
     * @type {number}
     * @memberof UserItemCreate
     */
    yearOfStudy: number
    /**
     *
     * @type {string}
     * @memberof UserItemCreate
     */
    password: string
    /**
     *
     * @type {Array<LanguageSkillItemCreate>}
     * @memberof UserItemCreate
     */
    languageSkills: Array<LanguageSkillItemCreate>
}
/**
 *
 * @export
 * @interface UserItemLogin
 */
export interface UserItemLogin {
    /**
     *
     * @type {string}
     * @memberof UserItemLogin
     */
    email: string
    /**
     *
     * @type {string}
     * @memberof UserItemLogin
     */
    password: string
}
/**
 *
 * @export
 * @interface UserItemUpdate
 */
export interface UserItemUpdate {
    /**
     *
     * @type {string}
     * @memberof UserItemUpdate
     */
    firstName: string
    /**
     *
     * @type {string}
     * @memberof UserItemUpdate
     */
    lastName: string
    /**
     *
     * @type {string}
     * @memberof UserItemUpdate
     */
    email: string
    /**
     *
     * @type {string}
     * @memberof UserItemUpdate
     */
    phoneNumber: string
    /**
     *
     * @type {string}
     * @memberof UserItemUpdate
     */
    sex: string
    /**
     *
     * @type {string}
     * @memberof UserItemUpdate
     */
    universityId: string
    /**
     *
     * @type {string}
     * @memberof UserItemUpdate
     */
    fieldOfStudyId: string
    /**
     *
     * @type {number}
     * @memberof UserItemUpdate
     */
    yearOfStudy: number
    /**
     *
     * @type {Array<LanguageSkillItemCreate>}
     * @memberof UserItemUpdate
     */
    languageSkills: Array<LanguageSkillItemCreate>
}
/**
 *
 * @export
 * @interface UserItemUpdatePassword
 */
export interface UserItemUpdatePassword {
    /**
     *
     * @type {string}
     * @memberof UserItemUpdatePassword
     */
    id: string
    /**
     *
     * @type {string}
     * @memberof UserItemUpdatePassword
     */
    oldPassword: string
    /**
     *
     * @type {string}
     * @memberof UserItemUpdatePassword
     */
    newPassword: string
}
/**
 *
 * @export
 * @interface UserItemUpdateRole
 */
export interface UserItemUpdateRole {
    /**
     *
     * @type {string}
     * @memberof UserItemUpdateRole
     */
    role: UserItemUpdateRoleRoleEnum
}

export const UserItemUpdateRoleRoleEnum = {
    Student: "STUDENT",
    IaesteMember: "IAESTE_MEMBER",
    LocalCoordinator: "LOCAL_COORDINATOR",
    GeneralCoordinator: "GENERAL_COORDINATOR",
    Admin: "ADMIN",
} as const

export type UserItemUpdateRoleRoleEnum = (typeof UserItemUpdateRoleRoleEnum)[keyof typeof UserItemUpdateRoleRoleEnum]

/**
 *
 * @export
 * @interface WorkshopItem
 */
export interface WorkshopItem {
    /**
     *
     * @type {string}
     * @memberof WorkshopItem
     */
    id?: string
    /**
     *
     * @type {CompanyItem}
     * @memberof WorkshopItem
     */
    company: CompanyItem
    /**
     *
     * @type {UniversityItem}
     * @memberof WorkshopItem
     */
    university: UniversityItem
    /**
     *
     * @type {string}
     * @memberof WorkshopItem
     */
    title: string
    /**
     *
     * @type {string}
     * @memberof WorkshopItem
     */
    status: WorkshopItemStatusEnum
    /**
     *
     * @type {string}
     * @memberof WorkshopItem
     */
    startsAt: string
    /**
     *
     * @type {string}
     * @memberof WorkshopItem
     */
    registrationEndsAt: string
    /**
     *
     * @type {string}
     * @memberof WorkshopItem
     */
    shortDescription: string
    /**
     *
     * @type {string}
     * @memberof WorkshopItem
     */
    longDescription: string
    /**
     *
     * @type {string}
     * @memberof WorkshopItem
     */
    address?: string
    /**
     *
     * @type {number}
     * @memberof WorkshopItem
     */
    capacity?: number
    /**
     *
     * @type {number}
     * @memberof WorkshopItem
     */
    durationMinutes?: number
    /**
     *
     * @type {string}
     * @memberof WorkshopItem
     */
    emailTextCandidate?: string
    /**
     *
     * @type {string}
     * @memberof WorkshopItem
     */
    emailTextQualified?: string
    /**
     *
     * @type {number}
     * @memberof WorkshopItem
     */
    minYearOfStudy?: number
    /**
     *
     * @type {number}
     * @memberof WorkshopItem
     */
    maxYearOfStudy?: number
    /**
     *
     * @type {Array<FieldOfStudyItem>}
     * @memberof WorkshopItem
     */
    preferableFieldsOfStudy: Array<FieldOfStudyItem>
    /**
     *
     * @type {boolean}
     * @memberof WorkshopItem
     */
    allFieldsOfStudyAccepted: boolean
    /**
     *
     * @type {boolean}
     * @memberof WorkshopItem
     */
    archived?: boolean
    /**
     *
     *  @type {Array<string>}
     * @memberof WorkshopItem
     */
    propositions?: {
        id: string[];
    }
    
}

export const WorkshopItemStatusEnum = {
    Unpublished: "UNPUBLISHED",
    Published: "PUBLISHED",
    Finished: "FINISHED",
    Cancelled: "CANCELLED",
} as const

export type WorkshopItemStatusEnum = (typeof WorkshopItemStatusEnum)[keyof typeof WorkshopItemStatusEnum]

/**
 *
 * @export
 * @interface WorkshopItemCreate
 */
export interface WorkshopItemCreate {
    /**
     *
     * @type {string}
     * @memberof WorkshopItemCreate
     */
    id?: string
    /**
     *
     * @type {CompanyItem}
     * @memberof WorkshopItemCreate
     */
    company: CompanyItem
    /**
     *
     * @type {UniversityItem}
     * @memberof WorkshopItemCreate
     */
    university: UniversityItem
    /**
     *
     * @type {string}
     * @memberof WorkshopItemCreate
     */
    title: string
    /**
     *
     * @type {string}
     * @memberof WorkshopItemCreate
     */
    startsAt: string
    /**
     *
     * @type {string}
     * @memberof WorkshopItemCreate
     */
    registrationEndsAt: string
    /**
     *
     * @type {string}
     * @memberof WorkshopItemCreate
     */
    shortDescription: string
    /**
     *
     * @type {string}
     * @memberof WorkshopItemCreate
     */
    longDescription: string
    /**
     *
     * @type {string}
     * @memberof WorkshopItemCreate
     */
    address?: string
    /**
     *
     * @type {number}
     * @memberof WorkshopItemCreate
     */
    capacity?: number
    /**
     *
     * @type {number}
     * @memberof WorkshopItemCreate
     */
    durationMinutes?: number
    /**
     *
     * @type {string}
     * @memberof WorkshopItemCreate
     */
    emailTextCandidate?: string
    /**
     *
     * @type {string}
     * @memberof WorkshopItemCreate
     */
    emailTextQualified?: string
    /**
     *
     * @type {number}
     * @memberof WorkshopItemCreate
     */
    minYearOfStudy?: number
    /**
     *
     * @type {number}
     * @memberof WorkshopItemCreate
     */
    maxYearOfStudy?: number
    /**
     *
     * @type {Array<FieldOfStudyItem>}
     * @memberof WorkshopItemCreate
     */
    preferableFieldsOfStudy: Array<FieldOfStudyItem>
    /**
     *
     * @type {boolean}
     * @memberof WorkshopItemCreate
     */
    allFieldsOfStudyAccepted: boolean
}
/**
 *
 * @export
 * @interface WorkshopMemberItem
 */
export interface WorkshopMemberItem {
    /**
     *
     * @type {string}
     * @memberof WorkshopMemberItem
     */
    id: string
    /**
     *
     * @type {WorkshopItem}
     * @memberof WorkshopMemberItem
     */
    workshop: WorkshopItem
    /**
     *
     * @type {UserItem}
     * @memberof WorkshopMemberItem
     */
    user: UserItem
    /**
     *
     * @type {string}
     * @memberof WorkshopMemberItem
     */
    status: WorkshopMemberItemStatusEnum
}

export const WorkshopMemberItemStatusEnum = {
    Candidate: "CANDIDATE",
    Qualified: "QUALIFIED",
    Confirmed: "CONFIRMED",
    Reserve: "RESERVE",
    Rejected: "REJECTED",
    Resigned: "RESIGNED",
} as const

export type WorkshopMemberItemStatusEnum = (typeof WorkshopMemberItemStatusEnum)[keyof typeof WorkshopMemberItemStatusEnum]

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {string} secretToken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currentAuthenticatedUser: async (secretToken: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'secretToken' is not null or undefined
            assertParamExists("currentAuthenticatedUser", "secretToken", secretToken)
            const localVarPath = `/auth/current-user`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {UserItemLogin} userItemLogin
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (userItemLogin: UserItemLogin, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userItemLogin' is not null or undefined
            assertParamExists("login", "userItemLogin", userItemLogin)
            const localVarPath = `/auth/login`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarHeaderParameter["Content-Type"] = "application/json"

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
            localVarRequestOptions.data = serializeDataIfNeeded(userItemLogin, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {string} refreshToken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout: async (refreshToken: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'refreshToken' is not null or undefined
            assertParamExists("logout", "refreshToken", refreshToken)
            const localVarPath = `/auth/logout`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
    }
}

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @param {string} secretToken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async currentAuthenticatedUser(secretToken: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.currentAuthenticatedUser(secretToken, options)
            const index = configuration?.serverIndex ?? 0
            const operationBasePath = operationServerMap["AuthApi.currentAuthenticatedUser"]?.[index]?.url
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath)
        },
        /**
         *
         * @param {UserItemLogin} userItemLogin
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(userItemLogin: UserItemLogin, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(userItemLogin, options)
            const index = configuration?.serverIndex ?? 0
            const operationBasePath = operationServerMap["AuthApi.login"]?.[index]?.url
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath)
        },
        /**
         *
         * @param {string} refreshToken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logout(refreshToken: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logout(refreshToken, options)
            const index = configuration?.serverIndex ?? 0
            const operationBasePath = operationServerMap["AuthApi.logout"]?.[index]?.url
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath)
        },
    }
}

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         *
         * @param {string} secretToken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currentAuthenticatedUser(secretToken: string, options?: any): AxiosPromise<UserItem> {
            return localVarFp.currentAuthenticatedUser(secretToken, options).then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {UserItemLogin} userItemLogin
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(userItemLogin: UserItemLogin, options?: any): AxiosPromise<UserItem> {
            return localVarFp.login(userItemLogin, options).then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {string} refreshToken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout(refreshToken: string, options?: any): AxiosPromise<void> {
            return localVarFp.logout(refreshToken, options).then((request) => request(axios, basePath))
        },
    }
}

/**
 * AuthApi - interface
 * @export
 * @interface AuthApi
 */
export interface AuthApiInterface {
    /**
     *
     * @param {string} secretToken
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    currentAuthenticatedUser(secretToken: string, options?: RawAxiosRequestConfig): AxiosPromise<UserItem>

    /**
     *
     * @param {UserItemLogin} userItemLogin
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    login(userItemLogin: UserItemLogin, options?: RawAxiosRequestConfig): AxiosPromise<UserItem>

    /**
     *
     * @param {string} refreshToken
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    logout(refreshToken: string, options?: RawAxiosRequestConfig): AxiosPromise<void>
}

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI implements AuthApiInterface {
    /**
     *
     * @param {string} secretToken
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public currentAuthenticatedUser(secretToken: string, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration)
            .currentAuthenticatedUser(secretToken, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {UserItemLogin} userItemLogin
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public login(userItemLogin: UserItemLogin, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration)
            .login(userItemLogin, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {string} refreshToken
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public logout(refreshToken: string, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration)
            .logout(refreshToken, options)
            .then((request) => request(this.axios, this.basePath))
    }
}

/**
 * CompaniesApi - axios parameter creator
 * @export
 */
export const CompaniesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {CompanyItemCreate} companyItemCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create6: async (companyItemCreate: CompanyItemCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyItemCreate' is not null or undefined
            assertParamExists("create6", "companyItemCreate", companyItemCreate)
            const localVarPath = `/companies/`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarHeaderParameter["Content-Type"] = "application/json"

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
            localVarRequestOptions.data = serializeDataIfNeeded(companyItemCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete6: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists("delete6", "id", id)
            const localVarPath = `/companies/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)))
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll6: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/companies/`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById6: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists("getById6", "id", id)
            const localVarPath = `/companies/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)))
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {string} id
         * @param {boolean} publish
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishCompany: async (id: string, publish: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists("publishCompany", "id", id)
            // verify required parameter 'publish' is not null or undefined
            assertParamExists("publishCompany", "publish", publish)
            const localVarPath = `/companies/{id}/publish`.replace(`{${"id"}}`, encodeURIComponent(String(id)))
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            if (publish !== undefined) {
                localVarQueryParameter["publish"] = publish
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {string} id
         * @param {CompanyItemCreate} companyItemCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update6: async (id: string, companyItemCreate: CompanyItemCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists("update6", "id", id)
            // verify required parameter 'companyItemCreate' is not null or undefined
            assertParamExists("update6", "companyItemCreate", companyItemCreate)
            const localVarPath = `/companies/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)))
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarHeaderParameter["Content-Type"] = "application/json"

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
            localVarRequestOptions.data = serializeDataIfNeeded(companyItemCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
    }
}

/**
 * CompaniesApi - functional programming interface
 * @export
 */
export const CompaniesApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = CompaniesApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @param {CompanyItemCreate} companyItemCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create6(companyItemCreate: CompanyItemCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create6(companyItemCreate, options)
            const index = configuration?.serverIndex ?? 0
            const operationBasePath = operationServerMap["CompaniesApi.create6"]?.[index]?.url
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath)
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delete6(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delete6(id, options)
            const index = configuration?.serverIndex ?? 0
            const operationBasePath = operationServerMap["CompaniesApi.delete6"]?.[index]?.url
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath)
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAll6(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CompanyItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAll6(options)
            const index = configuration?.serverIndex ?? 0
            const operationBasePath = operationServerMap["CompaniesApi.getAll6"]?.[index]?.url
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath)
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById6(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById6(id, options)
            const index = configuration?.serverIndex ?? 0
            const operationBasePath = operationServerMap["CompaniesApi.getById6"]?.[index]?.url
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath)
        },
        /**
         *
         * @param {string} id
         * @param {boolean} publish
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publishCompany(id: string, publish: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.publishCompany(id, publish, options)
            const index = configuration?.serverIndex ?? 0
            const operationBasePath = operationServerMap["CompaniesApi.publishCompany"]?.[index]?.url
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath)
        },
        /**
         *
         * @param {string} id
         * @param {CompanyItemCreate} companyItemCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update6(id: string, companyItemCreate: CompanyItemCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update6(id, companyItemCreate, options)
            const index = configuration?.serverIndex ?? 0
            const operationBasePath = operationServerMap["CompaniesApi.update6"]?.[index]?.url
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath)
        },
    }
}

/**
 * CompaniesApi - factory interface
 * @export
 */
export const CompaniesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CompaniesApiFp(configuration)
    return {
        /**
         *
         * @param {CompanyItemCreate} companyItemCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create6(companyItemCreate: CompanyItemCreate, options?: any): AxiosPromise<CompanyItem> {
            return localVarFp.create6(companyItemCreate, options).then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete6(id: string, options?: any): AxiosPromise<object> {
            return localVarFp.delete6(id, options).then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll6(options?: any): AxiosPromise<Array<CompanyItem>> {
            return localVarFp.getAll6(options).then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById6(id: string, options?: any): AxiosPromise<CompanyItem> {
            return localVarFp.getById6(id, options).then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {string} id
         * @param {boolean} publish
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishCompany(id: string, publish: boolean, options?: any): AxiosPromise<CompanyItem> {
            return localVarFp.publishCompany(id, publish, options).then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {string} id
         * @param {CompanyItemCreate} companyItemCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update6(id: string, companyItemCreate: CompanyItemCreate, options?: any): AxiosPromise<CompanyItem> {
            return localVarFp.update6(id, companyItemCreate, options).then((request) => request(axios, basePath))
        },
    }
}

/**
 * CompaniesApi - interface
 * @export
 * @interface CompaniesApi
 */
export interface CompaniesApiInterface {
    /**
     *
     * @param {CompanyItemCreate} companyItemCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApiInterface
     */
    create6(companyItemCreate: CompanyItemCreate, options?: RawAxiosRequestConfig): AxiosPromise<CompanyItem>

    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApiInterface
     */
    delete6(id: string, options?: RawAxiosRequestConfig): AxiosPromise<object>

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApiInterface
     */
    getAll6(options?: RawAxiosRequestConfig): AxiosPromise<Array<CompanyItem>>

    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApiInterface
     */
    getById6(id: string, options?: RawAxiosRequestConfig): AxiosPromise<CompanyItem>

    /**
     *
     * @param {string} id
     * @param {boolean} publish
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApiInterface
     */
    publishCompany(id: string, publish: boolean, options?: RawAxiosRequestConfig): AxiosPromise<CompanyItem>

    /**
     *
     * @param {string} id
     * @param {CompanyItemCreate} companyItemCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApiInterface
     */
    update6(id: string, companyItemCreate: CompanyItemCreate, options?: RawAxiosRequestConfig): AxiosPromise<CompanyItem>
}

/**
 * CompaniesApi - object-oriented interface
 * @export
 * @class CompaniesApi
 * @extends {BaseAPI}
 */
export class CompaniesApi extends BaseAPI implements CompaniesApiInterface {
    /**
     *
     * @param {CompanyItemCreate} companyItemCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    public create6(companyItemCreate: CompanyItemCreate, options?: RawAxiosRequestConfig) {
        return CompaniesApiFp(this.configuration)
            .create6(companyItemCreate, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    public delete6(id: string, options?: RawAxiosRequestConfig) {
        return CompaniesApiFp(this.configuration)
            .delete6(id, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    public getAll6(options?: RawAxiosRequestConfig) {
        return CompaniesApiFp(this.configuration)
            .getAll6(options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    public getById6(id: string, options?: RawAxiosRequestConfig) {
        return CompaniesApiFp(this.configuration)
            .getById6(id, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {string} id
     * @param {boolean} publish
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    public publishCompany(id: string, publish: boolean, options?: RawAxiosRequestConfig) {
        return CompaniesApiFp(this.configuration)
            .publishCompany(id, publish, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {string} id
     * @param {CompanyItemCreate} companyItemCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    public update6(id: string, companyItemCreate: CompanyItemCreate, options?: RawAxiosRequestConfig) {
        return CompaniesApiFp(this.configuration)
            .update6(id, companyItemCreate, options)
            .then((request) => request(this.axios, this.basePath))
    }
}

/**
 * FieldOfStudiesApi - axios parameter creator
 * @export
 */
export const FieldOfStudiesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {FieldOfStudyItemCreate} fieldOfStudyItemCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create5: async (fieldOfStudyItemCreate: FieldOfStudyItemCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fieldOfStudyItemCreate' is not null or undefined
            assertParamExists("create5", "fieldOfStudyItemCreate", fieldOfStudyItemCreate)
            const localVarPath = `/field-of-studies/`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarHeaderParameter["Content-Type"] = "application/json"

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
            localVarRequestOptions.data = serializeDataIfNeeded(fieldOfStudyItemCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete5: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists("delete5", "id", id)
            const localVarPath = `/field-of-studies/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)))
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll5: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/field-of-studies/`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById5: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists("getById5", "id", id)
            const localVarPath = `/field-of-studies/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)))
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {string} id
         * @param {FieldOfStudyItemCreate} fieldOfStudyItemCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update5: async (id: string, fieldOfStudyItemCreate: FieldOfStudyItemCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists("update5", "id", id)
            // verify required parameter 'fieldOfStudyItemCreate' is not null or undefined
            assertParamExists("update5", "fieldOfStudyItemCreate", fieldOfStudyItemCreate)
            const localVarPath = `/field-of-studies/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)))
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarHeaderParameter["Content-Type"] = "application/json"

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
            localVarRequestOptions.data = serializeDataIfNeeded(fieldOfStudyItemCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
    }
}

/**
 * FieldOfStudiesApi - functional programming interface
 * @export
 */
export const FieldOfStudiesApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = FieldOfStudiesApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @param {FieldOfStudyItemCreate} fieldOfStudyItemCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create5(fieldOfStudyItemCreate: FieldOfStudyItemCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FieldOfStudyItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create5(fieldOfStudyItemCreate, options)
            const index = configuration?.serverIndex ?? 0
            const operationBasePath = operationServerMap["FieldOfStudiesApi.create5"]?.[index]?.url
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath)
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delete5(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delete5(id, options)
            const index = configuration?.serverIndex ?? 0
            const operationBasePath = operationServerMap["FieldOfStudiesApi.delete5"]?.[index]?.url
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath)
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAll5(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FieldOfStudyItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAll5(options)
            const index = configuration?.serverIndex ?? 0
            const operationBasePath = operationServerMap["FieldOfStudiesApi.getAll5"]?.[index]?.url
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath)
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById5(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FieldOfStudyItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById5(id, options)
            const index = configuration?.serverIndex ?? 0
            const operationBasePath = operationServerMap["FieldOfStudiesApi.getById5"]?.[index]?.url
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath)
        },
        /**
         *
         * @param {string} id
         * @param {FieldOfStudyItemCreate} fieldOfStudyItemCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update5(
            id: string,
            fieldOfStudyItemCreate: FieldOfStudyItemCreate,
            options?: RawAxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FieldOfStudyItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update5(id, fieldOfStudyItemCreate, options)
            const index = configuration?.serverIndex ?? 0
            const operationBasePath = operationServerMap["FieldOfStudiesApi.update5"]?.[index]?.url
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath)
        },
    }
}

/**
 * FieldOfStudiesApi - factory interface
 * @export
 */
export const FieldOfStudiesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FieldOfStudiesApiFp(configuration)
    return {
        /**
         *
         * @param {FieldOfStudyItemCreate} fieldOfStudyItemCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create5(fieldOfStudyItemCreate: FieldOfStudyItemCreate, options?: any): AxiosPromise<FieldOfStudyItem> {
            return localVarFp.create5(fieldOfStudyItemCreate, options).then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete5(id: string, options?: any): AxiosPromise<MessageResponse> {
            return localVarFp.delete5(id, options).then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll5(options?: any): AxiosPromise<Array<FieldOfStudyItem>> {
            return localVarFp.getAll5(options).then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById5(id: string, options?: any): AxiosPromise<FieldOfStudyItem> {
            return localVarFp.getById5(id, options).then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {string} id
         * @param {FieldOfStudyItemCreate} fieldOfStudyItemCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update5(id: string, fieldOfStudyItemCreate: FieldOfStudyItemCreate, options?: any): AxiosPromise<FieldOfStudyItem> {
            return localVarFp.update5(id, fieldOfStudyItemCreate, options).then((request) => request(axios, basePath))
        },
    }
}

/**
 * FieldOfStudiesApi - interface
 * @export
 * @interface FieldOfStudiesApi
 */
export interface FieldOfStudiesApiInterface {
    /**
     *
     * @param {FieldOfStudyItemCreate} fieldOfStudyItemCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FieldOfStudiesApiInterface
     */
    create5(fieldOfStudyItemCreate: FieldOfStudyItemCreate, options?: RawAxiosRequestConfig): AxiosPromise<FieldOfStudyItem>

    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FieldOfStudiesApiInterface
     */
    delete5(id: string, options?: RawAxiosRequestConfig): AxiosPromise<MessageResponse>

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FieldOfStudiesApiInterface
     */
    getAll5(options?: RawAxiosRequestConfig): AxiosPromise<Array<FieldOfStudyItem>>

    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FieldOfStudiesApiInterface
     */
    getById5(id: string, options?: RawAxiosRequestConfig): AxiosPromise<FieldOfStudyItem>

    /**
     *
     * @param {string} id
     * @param {FieldOfStudyItemCreate} fieldOfStudyItemCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FieldOfStudiesApiInterface
     */
    update5(id: string, fieldOfStudyItemCreate: FieldOfStudyItemCreate, options?: RawAxiosRequestConfig): AxiosPromise<FieldOfStudyItem>
}

/**
 * FieldOfStudiesApi - object-oriented interface
 * @export
 * @class FieldOfStudiesApi
 * @extends {BaseAPI}
 */
export class FieldOfStudiesApi extends BaseAPI implements FieldOfStudiesApiInterface {
    /**
     *
     * @param {FieldOfStudyItemCreate} fieldOfStudyItemCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FieldOfStudiesApi
     */
    public create5(fieldOfStudyItemCreate: FieldOfStudyItemCreate, options?: RawAxiosRequestConfig) {
        return FieldOfStudiesApiFp(this.configuration)
            .create5(fieldOfStudyItemCreate, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FieldOfStudiesApi
     */
    public delete5(id: string, options?: RawAxiosRequestConfig) {
        return FieldOfStudiesApiFp(this.configuration)
            .delete5(id, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FieldOfStudiesApi
     */
    public getAll5(options?: RawAxiosRequestConfig) {
        return FieldOfStudiesApiFp(this.configuration)
            .getAll5(options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FieldOfStudiesApi
     */
    public getById5(id: string, options?: RawAxiosRequestConfig) {
        return FieldOfStudiesApiFp(this.configuration)
            .getById5(id, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {string} id
     * @param {FieldOfStudyItemCreate} fieldOfStudyItemCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FieldOfStudiesApi
     */
    public update5(id: string, fieldOfStudyItemCreate: FieldOfStudyItemCreate, options?: RawAxiosRequestConfig) {
        return FieldOfStudiesApiFp(this.configuration)
            .update5(id, fieldOfStudyItemCreate, options)
            .then((request) => request(this.axios, this.basePath))
    }
}

/**
 * LanguagesApi - axios parameter creator
 * @export
 */
export const LanguagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {LanguageItemCreate} languageItemCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create4: async (languageItemCreate: LanguageItemCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'languageItemCreate' is not null or undefined
            assertParamExists("create4", "languageItemCreate", languageItemCreate)
            const localVarPath = `/languages/`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarHeaderParameter["Content-Type"] = "application/json"

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
            localVarRequestOptions.data = serializeDataIfNeeded(languageItemCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete4: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists("delete4", "id", id)
            const localVarPath = `/languages/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)))
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll4: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/languages/`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById4: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists("getById4", "id", id)
            const localVarPath = `/languages/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)))
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {string} id
         * @param {LanguageItemCreate} languageItemCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update4: async (id: string, languageItemCreate: LanguageItemCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists("update4", "id", id)
            // verify required parameter 'languageItemCreate' is not null or undefined
            assertParamExists("update4", "languageItemCreate", languageItemCreate)
            const localVarPath = `/languages/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)))
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarHeaderParameter["Content-Type"] = "application/json"

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
            localVarRequestOptions.data = serializeDataIfNeeded(languageItemCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
    }
}

/**
 * LanguagesApi - functional programming interface
 * @export
 */
export const LanguagesApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = LanguagesApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @param {LanguageItemCreate} languageItemCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create4(languageItemCreate: LanguageItemCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LanguageItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create4(languageItemCreate, options)
            const index = configuration?.serverIndex ?? 0
            const operationBasePath = operationServerMap["LanguagesApi.create4"]?.[index]?.url
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath)
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delete4(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delete4(id, options)
            const index = configuration?.serverIndex ?? 0
            const operationBasePath = operationServerMap["LanguagesApi.delete4"]?.[index]?.url
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath)
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAll4(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LanguageItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAll4(options)
            const index = configuration?.serverIndex ?? 0
            const operationBasePath = operationServerMap["LanguagesApi.getAll4"]?.[index]?.url
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath)
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById4(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LanguageItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById4(id, options)
            const index = configuration?.serverIndex ?? 0
            const operationBasePath = operationServerMap["LanguagesApi.getById4"]?.[index]?.url
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath)
        },
        /**
         *
         * @param {string} id
         * @param {LanguageItemCreate} languageItemCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update4(id: string, languageItemCreate: LanguageItemCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LanguageItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update4(id, languageItemCreate, options)
            const index = configuration?.serverIndex ?? 0
            const operationBasePath = operationServerMap["LanguagesApi.update4"]?.[index]?.url
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath)
        },
    }
}

/**
 * LanguagesApi - factory interface
 * @export
 */
export const LanguagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LanguagesApiFp(configuration)
    return {
        /**
         *
         * @param {LanguageItemCreate} languageItemCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create4(languageItemCreate: LanguageItemCreate, options?: any): AxiosPromise<LanguageItem> {
            return localVarFp.create4(languageItemCreate, options).then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete4(id: string, options?: any): AxiosPromise<MessageResponse> {
            return localVarFp.delete4(id, options).then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll4(options?: any): AxiosPromise<Array<LanguageItem>> {
            return localVarFp.getAll4(options).then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById4(id: string, options?: any): AxiosPromise<LanguageItem> {
            return localVarFp.getById4(id, options).then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {string} id
         * @param {LanguageItemCreate} languageItemCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update4(id: string, languageItemCreate: LanguageItemCreate, options?: any): AxiosPromise<LanguageItem> {
            return localVarFp.update4(id, languageItemCreate, options).then((request) => request(axios, basePath))
        },
    }
}

/**
 * LanguagesApi - interface
 * @export
 * @interface LanguagesApi
 */
export interface LanguagesApiInterface {
    /**
     *
     * @param {LanguageItemCreate} languageItemCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LanguagesApiInterface
     */
    create4(languageItemCreate: LanguageItemCreate, options?: RawAxiosRequestConfig): AxiosPromise<LanguageItem>

    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LanguagesApiInterface
     */
    delete4(id: string, options?: RawAxiosRequestConfig): AxiosPromise<MessageResponse>

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LanguagesApiInterface
     */
    getAll4(options?: RawAxiosRequestConfig): AxiosPromise<Array<LanguageItem>>

    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LanguagesApiInterface
     */
    getById4(id: string, options?: RawAxiosRequestConfig): AxiosPromise<LanguageItem>

    /**
     *
     * @param {string} id
     * @param {LanguageItemCreate} languageItemCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LanguagesApiInterface
     */
    update4(id: string, languageItemCreate: LanguageItemCreate, options?: RawAxiosRequestConfig): AxiosPromise<LanguageItem>
}

/**
 * LanguagesApi - object-oriented interface
 * @export
 * @class LanguagesApi
 * @extends {BaseAPI}
 */
export class LanguagesApi extends BaseAPI implements LanguagesApiInterface {
    /**
     *
     * @param {LanguageItemCreate} languageItemCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LanguagesApi
     */
    public create4(languageItemCreate: LanguageItemCreate, options?: RawAxiosRequestConfig) {
        return LanguagesApiFp(this.configuration)
            .create4(languageItemCreate, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LanguagesApi
     */
    public delete4(id: string, options?: RawAxiosRequestConfig) {
        return LanguagesApiFp(this.configuration)
            .delete4(id, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LanguagesApi
     */
    public getAll4(options?: RawAxiosRequestConfig) {
        return LanguagesApiFp(this.configuration)
            .getAll4(options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LanguagesApi
     */
    public getById4(id: string, options?: RawAxiosRequestConfig) {
        return LanguagesApiFp(this.configuration)
            .getById4(id, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {string} id
     * @param {LanguageItemCreate} languageItemCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LanguagesApi
     */
    public update4(id: string, languageItemCreate: LanguageItemCreate, options?: RawAxiosRequestConfig) {
        return LanguagesApiFp(this.configuration)
            .update4(id, languageItemCreate, options)
            .then((request) => request(this.axios, this.basePath))
    }
}

/**
 * PartnersApi - axios parameter creator
 * @export
 */
export const PartnersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {PartnerItemCreate} partnerItemCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create3: async (partnerItemCreate: PartnerItemCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'partnerItemCreate' is not null or undefined
            assertParamExists("create3", "partnerItemCreate", partnerItemCreate)
            const localVarPath = `/partners/`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarHeaderParameter["Content-Type"] = "application/json"

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
            localVarRequestOptions.data = serializeDataIfNeeded(partnerItemCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete3: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists("delete3", "id", id)
            const localVarPath = `/partners/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)))
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll3: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/partners/`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById3: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists("getById3", "id", id)
            const localVarPath = `/partners/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)))
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {string} id
         * @param {boolean} publish
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishPartner: async (id: string, publish: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists("publishPartner", "id", id)
            // verify required parameter 'publish' is not null or undefined
            assertParamExists("publishPartner", "publish", publish)
            const localVarPath = `/partners/{id}/publish`.replace(`{${"id"}}`, encodeURIComponent(String(id)))
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            if (publish !== undefined) {
                localVarQueryParameter["publish"] = publish
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {string} id
         * @param {PartnerItemCreate} partnerItemCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update3: async (id: string, partnerItemCreate: PartnerItemCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists("update3", "id", id)
            // verify required parameter 'partnerItemCreate' is not null or undefined
            assertParamExists("update3", "partnerItemCreate", partnerItemCreate)
            const localVarPath = `/partners/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)))
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarHeaderParameter["Content-Type"] = "application/json"

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
            localVarRequestOptions.data = serializeDataIfNeeded(partnerItemCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
    }
}

/**
 * PartnersApi - functional programming interface
 * @export
 */
export const PartnersApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = PartnersApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @param {PartnerItemCreate} partnerItemCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create3(partnerItemCreate: PartnerItemCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PartnerItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create3(partnerItemCreate, options)
            const index = configuration?.serverIndex ?? 0
            const operationBasePath = operationServerMap["PartnersApi.create3"]?.[index]?.url
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath)
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delete3(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delete3(id, options)
            const index = configuration?.serverIndex ?? 0
            const operationBasePath = operationServerMap["PartnersApi.delete3"]?.[index]?.url
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath)
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAll3(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PartnerItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAll3(options)
            const index = configuration?.serverIndex ?? 0
            const operationBasePath = operationServerMap["PartnersApi.getAll3"]?.[index]?.url
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath)
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById3(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PartnerItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById3(id, options)
            const index = configuration?.serverIndex ?? 0
            const operationBasePath = operationServerMap["PartnersApi.getById3"]?.[index]?.url
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath)
        },
        /**
         *
         * @param {string} id
         * @param {boolean} publish
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publishPartner(id: string, publish: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PartnerItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.publishPartner(id, publish, options)
            const index = configuration?.serverIndex ?? 0
            const operationBasePath = operationServerMap["PartnersApi.publishPartner"]?.[index]?.url
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath)
        },
        /**
         *
         * @param {string} id
         * @param {PartnerItemCreate} partnerItemCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update3(id: string, partnerItemCreate: PartnerItemCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PartnerItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update3(id, partnerItemCreate, options)
            const index = configuration?.serverIndex ?? 0
            const operationBasePath = operationServerMap["PartnersApi.update3"]?.[index]?.url
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath)
        },
    }
}

/**
 * PartnersApi - factory interface
 * @export
 */
export const PartnersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PartnersApiFp(configuration)
    return {
        /**
         *
         * @param {PartnerItemCreate} partnerItemCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create3(partnerItemCreate: PartnerItemCreate, options?: any): AxiosPromise<PartnerItem> {
            return localVarFp.create3(partnerItemCreate, options).then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete3(id: string, options?: any): AxiosPromise<object> {
            return localVarFp.delete3(id, options).then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll3(options?: any): AxiosPromise<Array<PartnerItem>> {
            return localVarFp.getAll3(options).then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById3(id: string, options?: any): AxiosPromise<PartnerItem> {
            return localVarFp.getById3(id, options).then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {string} id
         * @param {boolean} publish
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishPartner(id: string, publish: boolean, options?: any): AxiosPromise<PartnerItem> {
            return localVarFp.publishPartner(id, publish, options).then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {string} id
         * @param {PartnerItemCreate} partnerItemCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update3(id: string, partnerItemCreate: PartnerItemCreate, options?: any): AxiosPromise<PartnerItem> {
            return localVarFp.update3(id, partnerItemCreate, options).then((request) => request(axios, basePath))
        },
    }
}

/**
 * PartnersApi - interface
 * @export
 * @interface PartnersApi
 */
export interface PartnersApiInterface {
    /**
     *
     * @param {PartnerItemCreate} partnerItemCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnersApiInterface
     */
    create3(partnerItemCreate: PartnerItemCreate, options?: RawAxiosRequestConfig): AxiosPromise<PartnerItem>

    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnersApiInterface
     */
    delete3(id: string, options?: RawAxiosRequestConfig): AxiosPromise<object>

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnersApiInterface
     */
    getAll3(options?: RawAxiosRequestConfig): AxiosPromise<Array<PartnerItem>>

    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnersApiInterface
     */
    getById3(id: string, options?: RawAxiosRequestConfig): AxiosPromise<PartnerItem>

    /**
     *
     * @param {string} id
     * @param {boolean} publish
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnersApiInterface
     */
    publishPartner(id: string, publish: boolean, options?: RawAxiosRequestConfig): AxiosPromise<PartnerItem>

    /**
     *
     * @param {string} id
     * @param {PartnerItemCreate} partnerItemCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnersApiInterface
     */
    update3(id: string, partnerItemCreate: PartnerItemCreate, options?: RawAxiosRequestConfig): AxiosPromise<PartnerItem>
}

/**
 * PartnersApi - object-oriented interface
 * @export
 * @class PartnersApi
 * @extends {BaseAPI}
 */
export class PartnersApi extends BaseAPI implements PartnersApiInterface {
    /**
     *
     * @param {PartnerItemCreate} partnerItemCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnersApi
     */
    public create3(partnerItemCreate: PartnerItemCreate, options?: RawAxiosRequestConfig) {
        return PartnersApiFp(this.configuration)
            .create3(partnerItemCreate, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnersApi
     */
    public delete3(id: string, options?: RawAxiosRequestConfig) {
        return PartnersApiFp(this.configuration)
            .delete3(id, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnersApi
     */
    public getAll3(options?: RawAxiosRequestConfig) {
        return PartnersApiFp(this.configuration)
            .getAll3(options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnersApi
     */
    public getById3(id: string, options?: RawAxiosRequestConfig) {
        return PartnersApiFp(this.configuration)
            .getById3(id, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {string} id
     * @param {boolean} publish
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnersApi
     */
    public publishPartner(id: string, publish: boolean, options?: RawAxiosRequestConfig) {
        return PartnersApiFp(this.configuration)
            .publishPartner(id, publish, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {string} id
     * @param {PartnerItemCreate} partnerItemCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnersApi
     */
    public update3(id: string, partnerItemCreate: PartnerItemCreate, options?: RawAxiosRequestConfig) {
        return PartnersApiFp(this.configuration)
            .update3(id, partnerItemCreate, options)
            .then((request) => request(this.axios, this.basePath))
    }
}

/**
 * UniversitiesApi - axios parameter creator
 * @export
 */
export const UniversitiesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {UniversityItemCreate} universityItemCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create2: async (universityItemCreate: UniversityItemCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universityItemCreate' is not null or undefined
            assertParamExists("create2", "universityItemCreate", universityItemCreate)
            const localVarPath = `/universities/`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarHeaderParameter["Content-Type"] = "application/json"

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
            localVarRequestOptions.data = serializeDataIfNeeded(universityItemCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete2: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists("delete2", "id", id)
            const localVarPath = `/universities/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)))
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll2: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/universities/`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById2: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists("getById2", "id", id)
            const localVarPath = `/universities/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)))
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {string} id
         * @param {UniversityItemCreate} universityItemCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update2: async (id: string, universityItemCreate: UniversityItemCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists("update2", "id", id)
            // verify required parameter 'universityItemCreate' is not null or undefined
            assertParamExists("update2", "universityItemCreate", universityItemCreate)
            const localVarPath = `/universities/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)))
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarHeaderParameter["Content-Type"] = "application/json"

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
            localVarRequestOptions.data = serializeDataIfNeeded(universityItemCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
    }
}

/**
 * UniversitiesApi - functional programming interface
 * @export
 */
export const UniversitiesApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = UniversitiesApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @param {UniversityItemCreate} universityItemCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create2(universityItemCreate: UniversityItemCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UniversityItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create2(universityItemCreate, options)
            const index = configuration?.serverIndex ?? 0
            const operationBasePath = operationServerMap["UniversitiesApi.create2"]?.[index]?.url
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath)
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delete2(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delete2(id, options)
            const index = configuration?.serverIndex ?? 0
            const operationBasePath = operationServerMap["UniversitiesApi.delete2"]?.[index]?.url
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath)
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAll2(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UniversityItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAll2(options)
            const index = configuration?.serverIndex ?? 0
            const operationBasePath = operationServerMap["UniversitiesApi.getAll2"]?.[index]?.url
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath)
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById2(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UniversityItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById2(id, options)
            const index = configuration?.serverIndex ?? 0
            const operationBasePath = operationServerMap["UniversitiesApi.getById2"]?.[index]?.url
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath)
        },
        /**
         *
         * @param {string} id
         * @param {UniversityItemCreate} universityItemCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update2(id: string, universityItemCreate: UniversityItemCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UniversityItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update2(id, universityItemCreate, options)
            const index = configuration?.serverIndex ?? 0
            const operationBasePath = operationServerMap["UniversitiesApi.update2"]?.[index]?.url
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath)
        },
    }
}

/**
 * UniversitiesApi - factory interface
 * @export
 */
export const UniversitiesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UniversitiesApiFp(configuration)
    return {
        /**
         *
         * @param {UniversityItemCreate} universityItemCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create2(universityItemCreate: UniversityItemCreate, options?: any): AxiosPromise<UniversityItem> {
            return localVarFp.create2(universityItemCreate, options).then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete2(id: string, options?: any): AxiosPromise<MessageResponse> {
            return localVarFp.delete2(id, options).then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll2(options?: any): AxiosPromise<Array<UniversityItem>> {
            return localVarFp.getAll2(options).then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById2(id: string, options?: any): AxiosPromise<UniversityItem> {
            return localVarFp.getById2(id, options).then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {string} id
         * @param {UniversityItemCreate} universityItemCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update2(id: string, universityItemCreate: UniversityItemCreate, options?: any): AxiosPromise<UniversityItem> {
            return localVarFp.update2(id, universityItemCreate, options).then((request) => request(axios, basePath))
        },
    }
}

/**
 * UniversitiesApi - interface
 * @export
 * @interface UniversitiesApi
 */
export interface UniversitiesApiInterface {
    /**
     *
     * @param {UniversityItemCreate} universityItemCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UniversitiesApiInterface
     */
    create2(universityItemCreate: UniversityItemCreate, options?: RawAxiosRequestConfig): AxiosPromise<UniversityItem>

    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UniversitiesApiInterface
     */
    delete2(id: string, options?: RawAxiosRequestConfig): AxiosPromise<MessageResponse>

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UniversitiesApiInterface
     */
    getAll2(options?: RawAxiosRequestConfig): AxiosPromise<Array<UniversityItem>>

    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UniversitiesApiInterface
     */
    getById2(id: string, options?: RawAxiosRequestConfig): AxiosPromise<UniversityItem>

    /**
     *
     * @param {string} id
     * @param {UniversityItemCreate} universityItemCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UniversitiesApiInterface
     */
    update2(id: string, universityItemCreate: UniversityItemCreate, options?: RawAxiosRequestConfig): AxiosPromise<UniversityItem>
}

/**
 * UniversitiesApi - object-oriented interface
 * @export
 * @class UniversitiesApi
 * @extends {BaseAPI}
 */
export class UniversitiesApi extends BaseAPI implements UniversitiesApiInterface {
    /**
     *
     * @param {UniversityItemCreate} universityItemCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UniversitiesApi
     */
    public create2(universityItemCreate: UniversityItemCreate, options?: RawAxiosRequestConfig) {
        return UniversitiesApiFp(this.configuration)
            .create2(universityItemCreate, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UniversitiesApi
     */
    public delete2(id: string, options?: RawAxiosRequestConfig) {
        return UniversitiesApiFp(this.configuration)
            .delete2(id, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UniversitiesApi
     */
    public getAll2(options?: RawAxiosRequestConfig) {
        return UniversitiesApiFp(this.configuration)
            .getAll2(options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UniversitiesApi
     */
    public getById2(id: string, options?: RawAxiosRequestConfig) {
        return UniversitiesApiFp(this.configuration)
            .getById2(id, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {string} id
     * @param {UniversityItemCreate} universityItemCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UniversitiesApi
     */
    public update2(id: string, universityItemCreate: UniversityItemCreate, options?: RawAxiosRequestConfig) {
        return UniversitiesApiFp(this.configuration)
            .update2(id, universityItemCreate, options)
            .then((request) => request(this.axios, this.basePath))
    }
}

/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {UserItemCreate} userItemCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create1: async (userItemCreate: UserItemCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userItemCreate' is not null or undefined
            assertParamExists("create1", "userItemCreate", userItemCreate)
            const localVarPath = `/users/`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarHeaderParameter["Content-Type"] = "application/json"

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
            localVarRequestOptions.data = serializeDataIfNeeded(userItemCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete1: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists("delete1", "id", id)
            const localVarPath = `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)))
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll1: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById1: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists("getById1", "id", id)
            const localVarPath = `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)))
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {string} id
         * @param {UserItemUpdate} userItemUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update1: async (id: string, userItemUpdate: UserItemUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists("update1", "id", id)
            // verify required parameter 'userItemUpdate' is not null or undefined
            assertParamExists("update1", "userItemUpdate", userItemUpdate)
            const localVarPath = `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)))
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarHeaderParameter["Content-Type"] = "application/json"

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
            localVarRequestOptions.data = serializeDataIfNeeded(userItemUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {UserItemUpdatePassword} userItemUpdatePassword
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePassword: async (userItemUpdatePassword: UserItemUpdatePassword, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userItemUpdatePassword' is not null or undefined
            assertParamExists("updatePassword", "userItemUpdatePassword", userItemUpdatePassword)
            const localVarPath = `/users/password`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarHeaderParameter["Content-Type"] = "application/json"

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
            localVarRequestOptions.data = serializeDataIfNeeded(userItemUpdatePassword, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {string} id
         * @param {UserItemUpdateRole} userItemUpdateRole
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRole: async (id: string, userItemUpdateRole: UserItemUpdateRole, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists("updateRole", "id", id)
            // verify required parameter 'userItemUpdateRole' is not null or undefined
            assertParamExists("updateRole", "userItemUpdateRole", userItemUpdateRole)
            const localVarPath = `/users/{id}/role`.replace(`{${"id"}}`, encodeURIComponent(String(id)))
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarHeaderParameter["Content-Type"] = "application/json"

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
            localVarRequestOptions.data = serializeDataIfNeeded(userItemUpdateRole, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
    }
}

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @param {UserItemCreate} userItemCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create1(userItemCreate: UserItemCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create1(userItemCreate, options)
            const index = configuration?.serverIndex ?? 0
            const operationBasePath = operationServerMap["UsersApi.create1"]?.[index]?.url
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath)
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delete1(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delete1(id, options)
            const index = configuration?.serverIndex ?? 0
            const operationBasePath = operationServerMap["UsersApi.delete1"]?.[index]?.url
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath)
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAll1(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAll1(options)
            const index = configuration?.serverIndex ?? 0
            const operationBasePath = operationServerMap["UsersApi.getAll1"]?.[index]?.url
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath)
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById1(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById1(id, options)
            const index = configuration?.serverIndex ?? 0
            const operationBasePath = operationServerMap["UsersApi.getById1"]?.[index]?.url
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath)
        },
        /**
         *
         * @param {string} id
         * @param {UserItemUpdate} userItemUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update1(id: string, userItemUpdate: UserItemUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update1(id, userItemUpdate, options)
            const index = configuration?.serverIndex ?? 0
            const operationBasePath = operationServerMap["UsersApi.update1"]?.[index]?.url
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath)
        },
        /**
         *
         * @param {UserItemUpdatePassword} userItemUpdatePassword
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePassword(userItemUpdatePassword: UserItemUpdatePassword, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePassword(userItemUpdatePassword, options)
            const index = configuration?.serverIndex ?? 0
            const operationBasePath = operationServerMap["UsersApi.updatePassword"]?.[index]?.url
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath)
        },
        /**
         *
         * @param {string} id
         * @param {UserItemUpdateRole} userItemUpdateRole
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRole(id: string, userItemUpdateRole: UserItemUpdateRole, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRole(id, userItemUpdateRole, options)
            const index = configuration?.serverIndex ?? 0
            const operationBasePath = operationServerMap["UsersApi.updateRole"]?.[index]?.url
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath)
        },
    }
}

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         *
         * @param {UserItemCreate} userItemCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create1(userItemCreate: UserItemCreate, options?: any): AxiosPromise<UserItem> {
            return localVarFp.create1(userItemCreate, options).then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete1(id: string, options?: any): AxiosPromise<MessageResponse> {
            return localVarFp.delete1(id, options).then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll1(options?: any): AxiosPromise<Array<UserItem>> {
            return localVarFp.getAll1(options).then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById1(id: string, options?: any): AxiosPromise<UserItem> {
            return localVarFp.getById1(id, options).then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {string} id
         * @param {UserItemUpdate} userItemUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update1(id: string, userItemUpdate: UserItemUpdate, options?: any): AxiosPromise<UserItem> {
            return localVarFp.update1(id, userItemUpdate, options).then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {UserItemUpdatePassword} userItemUpdatePassword
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePassword(userItemUpdatePassword: UserItemUpdatePassword, options?: any): AxiosPromise<MessageResponse> {
            return localVarFp.updatePassword(userItemUpdatePassword, options).then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {string} id
         * @param {UserItemUpdateRole} userItemUpdateRole
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRole(id: string, userItemUpdateRole: UserItemUpdateRole, options?: any): AxiosPromise<UserItem> {
            return localVarFp.updateRole(id, userItemUpdateRole, options).then((request) => request(axios, basePath))
        },
    }
}

/**
 * UsersApi - interface
 * @export
 * @interface UsersApi
 */
export interface UsersApiInterface {
    /**
     *
     * @param {UserItemCreate} userItemCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    create1(userItemCreate: UserItemCreate, options?: RawAxiosRequestConfig): AxiosPromise<UserItem>

    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    delete1(id: string, options?: RawAxiosRequestConfig): AxiosPromise<MessageResponse>

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    getAll1(options?: RawAxiosRequestConfig): AxiosPromise<Array<UserItem>>

    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    getById1(id: string, options?: RawAxiosRequestConfig): AxiosPromise<UserItem>

    /**
     *
     * @param {string} id
     * @param {UserItemUpdate} userItemUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    update1(id: string, userItemUpdate: UserItemUpdate, options?: RawAxiosRequestConfig): AxiosPromise<UserItem>

    /**
     *
     * @param {UserItemUpdatePassword} userItemUpdatePassword
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    updatePassword(userItemUpdatePassword: UserItemUpdatePassword, options?: RawAxiosRequestConfig): AxiosPromise<MessageResponse>

    /**
     *
     * @param {string} id
     * @param {UserItemUpdateRole} userItemUpdateRole
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    updateRole(id: string, userItemUpdateRole: UserItemUpdateRole, options?: RawAxiosRequestConfig): AxiosPromise<UserItem>
}

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI implements UsersApiInterface {
    /**
     *
     * @param {UserItemCreate} userItemCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public create1(userItemCreate: UserItemCreate, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration)
            .create1(userItemCreate, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public delete1(id: string, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration)
            .delete1(id, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getAll1(options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration)
            .getAll1(options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getById1(id: string, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration)
            .getById1(id, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {string} id
     * @param {UserItemUpdate} userItemUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public update1(id: string, userItemUpdate: UserItemUpdate, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration)
            .update1(id, userItemUpdate, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {UserItemUpdatePassword} userItemUpdatePassword
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public updatePassword(userItemUpdatePassword: UserItemUpdatePassword, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration)
            .updatePassword(userItemUpdatePassword, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {string} id
     * @param {UserItemUpdateRole} userItemUpdateRole
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public updateRole(id: string, userItemUpdateRole: UserItemUpdateRole, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration)
            .updateRole(id, userItemUpdateRole, options)
            .then((request) => request(this.axios, this.basePath))
    }
}

/**
 * WorkshopsApi - axios parameter creator
 * @export
 */
export const WorkshopsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists("_delete", "id", id)
            const localVarPath = `/workshops/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)))
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {WorkshopItemCreate} workshopItemCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (workshopItemCreate: WorkshopItemCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workshopItemCreate' is not null or undefined
            assertParamExists("create", "workshopItemCreate", workshopItemCreate)
            const localVarPath = `/workshops/`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarHeaderParameter["Content-Type"] = "application/json"

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
            localVarRequestOptions.data = serializeDataIfNeeded(workshopItemCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/workshops/`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists("getById", "id", id)
            const localVarPath = `/workshops/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)))
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {string} id
         * @param {WorkshopItemCreate} workshopItemCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: async (id: string, workshopItemCreate: WorkshopItemCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists("update", "id", id)
            // verify required parameter 'workshopItemCreate' is not null or undefined
            assertParamExists("update", "workshopItemCreate", workshopItemCreate)
            const localVarPath = `/workshops/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)))
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarHeaderParameter["Content-Type"] = "application/json"

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
            localVarRequestOptions.data = serializeDataIfNeeded(workshopItemCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
    }
}

/**
 * WorkshopsApi - functional programming interface
 * @export
 */
export const WorkshopsApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = WorkshopsApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _delete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._delete(id, options)
            const index = configuration?.serverIndex ?? 0
            const operationBasePath = operationServerMap["WorkshopsApi._delete"]?.[index]?.url
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath)
        },
        /**
         *
         * @param {WorkshopItemCreate} workshopItemCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(workshopItemCreate: WorkshopItemCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkshopItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(workshopItemCreate, options)
            const index = configuration?.serverIndex ?? 0
            const operationBasePath = operationServerMap["WorkshopsApi.create"]?.[index]?.url
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath)
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkshopItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAll(options)
            const index = configuration?.serverIndex ?? 0
            const operationBasePath = operationServerMap["WorkshopsApi.getAll"]?.[index]?.url
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath)
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkshopItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(id, options)
            const index = configuration?.serverIndex ?? 0
            const operationBasePath = operationServerMap["WorkshopsApi.getById"]?.[index]?.url
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath)
        },
        /**
         *
         * @param {string} id
         * @param {WorkshopItemCreate} workshopItemCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update(id: string, workshopItemCreate: WorkshopItemCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkshopItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update(id, workshopItemCreate, options)
            const index = configuration?.serverIndex ?? 0
            const operationBasePath = operationServerMap["WorkshopsApi.update"]?.[index]?.url
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath)
        },
    }
}

/**
 * WorkshopsApi - factory interface
 * @export
 */
export const WorkshopsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WorkshopsApiFp(configuration)
    return {
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(id: string, options?: any): AxiosPromise<MessageResponse> {
            return localVarFp._delete(id, options).then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {WorkshopItemCreate} workshopItemCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(workshopItemCreate: WorkshopItemCreate, options?: any): AxiosPromise<WorkshopItem> {
            return localVarFp.create(workshopItemCreate, options).then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(options?: any): AxiosPromise<Array<WorkshopItem>> {
            return localVarFp.getAll(options).then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(id: string, options?: any): AxiosPromise<WorkshopItem> {
            return localVarFp.getById(id, options).then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {string} id
         * @param {WorkshopItemCreate} workshopItemCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(id: string, workshopItemCreate: WorkshopItemCreate, options?: any): AxiosPromise<WorkshopItem> {
            return localVarFp.update(id, workshopItemCreate, options).then((request) => request(axios, basePath))
        },
    }
}

/**
 * WorkshopsApi - interface
 * @export
 * @interface WorkshopsApi
 */
export interface WorkshopsApiInterface {
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkshopsApiInterface
     */
    _delete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<MessageResponse>

    /**
     *
     * @param {WorkshopItemCreate} workshopItemCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkshopsApiInterface
     */
    create(workshopItemCreate: WorkshopItemCreate, options?: RawAxiosRequestConfig): AxiosPromise<WorkshopItem>

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkshopsApiInterface
     */
    getAll(options?: RawAxiosRequestConfig): AxiosPromise<Array<WorkshopItem>>

    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkshopsApiInterface
     */
    getById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<WorkshopItem>

    /**
     *
     * @param {string} id
     * @param {WorkshopItemCreate} workshopItemCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkshopsApiInterface
     */
    update(id: string, workshopItemCreate: WorkshopItemCreate, options?: RawAxiosRequestConfig): AxiosPromise<WorkshopItem>
}

/**
 * WorkshopsApi - object-oriented interface
 * @export
 * @class WorkshopsApi
 * @extends {BaseAPI}
 */
export class WorkshopsApi extends BaseAPI implements WorkshopsApiInterface {
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkshopsApi
     */
    public _delete(id: string, options?: RawAxiosRequestConfig) {
        return WorkshopsApiFp(this.configuration)
            ._delete(id, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {WorkshopItemCreate} workshopItemCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkshopsApi
     */
    public create(workshopItemCreate: WorkshopItemCreate, options?: RawAxiosRequestConfig) {
        return WorkshopsApiFp(this.configuration)
            .create(workshopItemCreate, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkshopsApi
     */
    public getAll(options?: RawAxiosRequestConfig) {
        return WorkshopsApiFp(this.configuration)
            .getAll(options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkshopsApi
     */
    public getById(id: string, options?: RawAxiosRequestConfig) {
        return WorkshopsApiFp(this.configuration)
            .getById(id, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {string} id
     * @param {WorkshopItemCreate} workshopItemCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkshopsApi
     */
    public update(id: string, workshopItemCreate: WorkshopItemCreate, options?: RawAxiosRequestConfig) {
        return WorkshopsApiFp(this.configuration)
            .update(id, workshopItemCreate, options)
            .then((request) => request(this.axios, this.basePath))
    }
}
